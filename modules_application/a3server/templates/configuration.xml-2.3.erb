<?xml version="1.0"?>
<configuration>
    <aaa-server-external>
        <listening-interface><%= ipaddress %></listening-interface>
        <listening-port><%= l_port_aaa_oauth %></listening-port>
    </aaa-server-external>

    <aaa-server-walled-garden>
        <listening-interface><%= ipaddress %></listening-interface>
        <listening-port><%= l_port_aaa_tauth %></listening-port>
    </aaa-server-walled-garden>

    <aaa-admin>
        <listening-interface><%= ipaddress %></listening-interface>
        <listening-port><%= l_port_aaa_admin %></listening-port>
    </aaa-admin>

    <aaa-bouncer>
        <listening-interface><%= ipaddress %></listening-interface>
        <listening-port><%= l_port_aaa_bouncer %></listening-port>
    </aaa-bouncer>

    <aaa-subms>
        <listening-interface><%= ipaddress %></listening-interface>
        <listening-port>8112</listening-port>
    </aaa-subms>

    <sso>
        <clientToGatewayInfo>
            <consumerInfo>
                <!-- key / secret for Nikon Portal client -->
                <key>97gAZ72CLCqaWbdbjBzg</key>
                <secret>BUQYB45crsEpUJrLvxdLHeVhCSDKzFN9gQ2tG6GBHsMxPAfw4f</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
            <consumerInfo>
                <!-- key / secret for Nikon device clients -->
                <key>AAXWR8At5ZryqRN4TamR</key>
                <secret>N9X96ayuvmvyVx8XR6SQ49cEZrHjdqtChyt3RJyX4GmhPtcEM8</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
            <consumerInfo>
                <!-- key / secret for ODM1 device clients -->
                <key>tH2R6PPE9BjNWWpfD5mc</key>
                <secret>HTFPUvJXQaz7sjRXDBFqR7W5XKyyb7zCF9mT7Bvx8PcEVh9tuX</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
            <consumerInfo>
                <!-- key / secret for ODM2 device clients -->
                <key>hB9TwWt4vEQAwRHGFc9J</key>
                <secret>VwEAHYPEnBFSGS6MBgXLqBBUsXH8VNfBuUwHtKJDB5Tv6qwbq2</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
            <consumerInfo>
                <!-- key / secret for MRE clients -->
                <key>W4XXmdfglN8EZjVjkYVU</key>
                <secret>wQpmVjxkJVW1xplBpO8IzWfstXAIJM8ndnhy2eYO12ZUPaEY2g</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
            <consumerInfo>
                <!-- key / secret for all other clients -->
                <key>ZXdxVEJVKSUjJEBVJVQ=</key>
                <secret>A/82ARN+Z3RZVU4jUCUxI1hfQ0orXiQrJlVKJE5eWUtDQ3Rnanlo</secret>
                <signAllQueryParams>true</signAllQueryParams>
                <signExtOauthParams>true</signExtOauthParams>
            </consumerInfo>
        </clientToGatewayInfo>
    </sso>

    <aaa>
        <!-- operator configuration: for each network code :
             - idField determines the field used for the accountId. 
               Possible values: msisdn, imei, imsi, deviceid, guid, accounttoken
             - obfuscateId determines if the idField must be obfuscated (i.e. MD5 hash) before returned as accountId
        -->        
        
        <operators>
<% operatorName.zip(validateMsisdn,idField,obfuscateId,bouncerCodecRefid,imps_domain,imps_alias,handlerType).each do | operator, validatemsisdn, idfield, obfuscateid, bouncercodecrefid, imps_domain, imps_alias, handlertype | -%>
		<operator name="<%= operator %>" validateMsisdn="<%= validatemsisdn %>">
			<authentication idField="<%= idfield %>" obfuscateId="<%= obfuscateid %>" bouncerCodecRefid="<%= bouncercodecrefid %>">
<% if imps_alias != "" -%>
				<imps domain="<%= imps_domain %>" url="http://<%= imps_alias %>:<%= v_port_imps_be %>/userprovisioning/services/UserProvisioning?wsdl"/>
<% end -%>
			</authentication>

			<handler type="<%= handlertype %>">
				<configuration>
					<subms url="http://<%= int_vip_cluster %>:<%= v_port_subms_aaa %>">
						<metadata nmp:uri="${file.dir}/subms-metadata.xml"/>

						<skip-authorization>
							<client clientId=".*Myriad_Update.*"/>
						</skip-authorization>
					</subms>

					<http-client>
						<read-timeout-ms>10000</read-timeout-ms>
						<request-timeout-ms>15000</request-timeout-ms>
					</http-client>
				</configuration>
			</handler>

			<network-codes>
<% networkCode.zip(descNamePerNC).each do | networkcode, description | -%>
<% if description.include? operator -%>
				<network code="<%= networkcode %>"/> <!-- <%= description %> -->
<% end -%>
<% end -%>
			</network-codes>
		</operator>
<% end -%>
        </operators>

        <!-- WARNING: msisdn-validators.xml and bouncer-codecs.xml are for unity2.3. Please disregard them for now -->
        <msisdn-validators nmp:uri="${file.dir}/msisdn-validators.xml"/>
        <bouncer-codecs nmp:uri="${file.dir}/bouncer-codecs.xml"/>

        <!-- network code normalizers determine the network code to return in the authentication response -->
        <network-code-normalizers nmp:uri="${file.dir}/network-code-normalizers.xml"/>
        
        <networks>
            <!-- examples below contain no subnet -->

            <!-- msisdnValidatorRefid is a reference to msisdn validators defined above by the
                 msisdn-validators element. If present and if the operator referring to that network has its
                 validateMsisdn="true", the MSISDN will be validated when processing a request for this network.
            
                 networkCodeNormalizerId is a reference to network code normalizers defined above by the
                 network-code-normalizers element. If present, the networkCode is normalized before being
                 returned in the authentication response.

                 network can have a default="true" attribute (only for one network). That network is used as a 
                 last resort if the network could not be identified by networkcode or subnet
                 For example:
                 <network code="111111" default="true">  
            -->

<% networkCode.zip(descNamePerNC,msisdnValidatorRefid).each do | networkCode, description, refid | -%>
<% if refid == "simple" -%>
		<network code="111111" msisdnValidatorRefid="simple">
			<subnet>0.0.0.0/0</subnet>
		</network>
<% else -%>
		<network code="<%= networkCode %>" msisdnValidatorRefid="<%= refid %>"/>   <!-- <%= description %> -->
<% end -%>
<% end -%>

        </networks>
        
        <!-- Some clients are unable to determine the number of digits of the network code. This configuration
             truncates any submitted network code starting with specific values.
             This configuration is optional: if absent, no network code truncation will be done -->
        <network-code-truncation>
            <!--  real example for India. Source: http://en.wikipedia.org/wiki/Mobile_Network_Code -->
		<!-- <network-code digits="5">404</network-code> -->
        </network-code-truncation>
       
        <!-- trusted clients :
             requests received on the walled garden HTTP port (e.g. Cellcube, WAP server, email2sms) and whose 
             x-unity-clientid header is in this list will have their headers trusted (x-unity-msisdn, x-unity-imsi, 
             x-unity-imei, x-unity-deviceid, x-unity-accounttoken), that is to say the client is assumed to have already
             validated them. This is used for internal trusted clients like cellcube or emailToSms skip 
             the PIN check but not WAP server. clientId values are regular expressions.  
        -->        
        <trusted-clients>
            <client clientId=".*Myriad_Update.*"/>
            <client clientId=".*email2sms.*"/>
        </trusted-clients>

        <!-- Over The Top clients -->
        <ott-clients>
           <!-- networkCode attribute is optional: networkCode determination rules for OTT:
                - if x-unity-networkCode specified by client: use it
                - otherwise if a networkCode attribute is specified (like below) : use it
                - otherwise try to match x-forwarded-for with subnets. If match use it, otherwise reject the request
           -->
           <client clientId=".*:MRE-.*" idField="imei" obfuscateId="true" networkCode="<%= ottCode %>"/>
        </ott-clients>

        <!-- Validity timeout: past this timeout, the token cannot be used for traffic anymore but 
             can still be used to be exchanged against another one. -->
        <token-validity unit="days">90</token-validity>

        <!-- Expiration timeout: past this timeout,the token is completely forgotten and cannot be
             exchanged against a new one. -->
        <token-expiration unit="days">120</token-expiration>

        <!-- A AAA account is evicted if not associated with any provider accounts (Facebook, Twitter...). This
             association exists after a user registered one of these accounts with the Unity GTW and until it
             hasn't been used for a certain period of time (see eviction-job/registration-timeout below). 
             This configuration avoids the eviction of a AAA account with no associated provider account: this
             could happen if the eviction job runs between the AAA account creation and the first registration.   
             This is a grace period between the AAA authentication and the first Unity GTW registration.
        -->
        <account-min-ttl unit="days">50</account-min-ttl>

        <!-- PIN expiration -->
        <pin-expiration unit="hours">4</pin-expiration>

        <!-- Bouncer token expiration -->
        <bouncer-token-expiration unit="hours">1</bouncer-token-expiration>

        <!-- Network information expiration. Must be very large. -->
        <network-info-expiration unit="days">3650</network-info-expiration>
        <!-- Network information must be refreshed every this period. -->
        <network-info-check-period unit="days">10</network-info-check-period>
        <!-- Network information is checked again sooner when operators report problems (timeout, errors). -->
        <network-info-short-check-period unit="hours">2</network-info-short-check-period>
        <!-- For network information: send this maximum number of requests in parallel to operators -->
        <network-info-batch-size>2</network-info-batch-size>

        <!-- GTW sends AAA authorization requests periodically. In the authorization response, the AAA indicates the 
             timestamp after which the GTW must send a new authorization request to the AAA. It is 'now' + this period. 
         -->
        <authorization-check-period unit="days">1</authorization-check-period>

        <!-- Unity gateway configuration -->
        <unity-gtw adminUrl="http://<%= int_vip_cluster %>:<%= v_port_ug_admin %>">
            <http-client>
                <read-timeout-ms>10000</read-timeout-ms>
                <request-timeout-ms>15000</request-timeout-ms>
            </http-client>    
        </unity-gtw>
        
        <user-data-source>AaaShardedDataSource</user-data-source>
        <eviction-data-source>AaaDataSourceFailOverPoolDataSource</eviction-data-source>
        <token-store-cache-id>token-store</token-store-cache-id>
        <network-info-store-cache-id>network-info-store</network-info-store-cache-id>
        
        <imps>
            <http-client>
                <read-timeout-ms>10000</read-timeout-ms>
                <request-timeout-ms>15000</request-timeout-ms>
            </http-client>    
        </imps>
        
        <eviction-job ignoreErrors="false" active="true">
            <job-period unit="hours">24</job-period>
<% if hostname.include? '01' -%>
            <job-start-gmt hour="<%= eviction_job_start_gmt.at(0) %>" minute="<%= eviction_job_start_gmt.at(1) %>"/>
<% else -%>
<% addOne = eviction_job_start_gmt.at(0).to_i -%>
<% addOne += 1 -%>
            <job-start-gmt hour="<%= addOne %>" minute="<%= eviction_job_start_gmt.at(1) %>"/>
<% end -%>
            <job-throttling unit="milliseconds">50</job-throttling> <!-- period between operator invocations -->
            <polling-timeout unit="days">14</polling-timeout>
            <registration-timeout unit="days">60</registration-timeout>
            
            <!-- A AAA account is evicted if not associated with any provider accounts (Facebook, Twitter...). This
                 association exists after a user registered one of these accounts with the Unity GTW and until it
                 hasn't been used for a certain period of time (see eviction-job/registration-timeout below). 
                 This configuration avoids the eviction of a AAA account with no associated provider account: this
                 could happen if the eviction job runs between the AAA account creation and the first registration.   
                 This is a grace period between the AAA authentication and the first Unity GTW registration.
            -->
            <account-min-ttl unit="days">50</account-min-ttl>
        </eviction-job>
        
        <!-- SubMS configuration to process SubMS notifications -->
        <subms url="http://<%= int_vip_cluster %>:<%= v_port_subms_aaa %>">
            <http-client>
                <read-timeout-ms>10000</read-timeout-ms>
                <request-timeout-ms>15000</request-timeout-ms>
            </http-client>    
        </subms>

    </aaa>
    
    <!-- resource binder config:
         internal is the name of the header that is internally available to the application.
         record-number 1-5 is used to write to transaction record http.header.1 to http.header.5 -->
    <http_rps>
        <header-map>
            <!-- empty for now. Below is an example. -->
            <!--  <header external="x-operator-header" internal="HEADER1" record-number="1"/> -->
        </header-map>
    </http_rps>

    <transactionrecorder>
        <rps>
            <recorderContextId><%= prefix %></recorderContextId>
        </rps>
        <subms>
            <recorderContextId><%= prefix %>Subms</recorderContextId>
        </subms>
    </transactionrecorder>
    
</configuration>
